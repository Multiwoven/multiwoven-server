# syntax = docker/dockerfile:1

# Make sure RUBY_VERSION matches the Ruby version in .ruby-version and Gemfile
ARG RUBY_VERSION=3.2.0
FROM registry.docker.com/library/ruby:$RUBY_VERSION-slim as base

# Rails app lives here
WORKDIR /rails

# Set environment variables for development
ENV BUNDLE_DEPLOYMENT=0
ENV BUNDLE_WITHOUT=''
ENV BUNDLE_PATH=/usr/local/bundle
ENV RAILS_ENV=development

# Throw-away build stage to reduce size of final image
FROM base as build

# Install packages needed to build gems
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential autoconf automake libtool git libpq-dev libvips pkg-config

# Copy the vendor directory and ODBC installation script
COPY vendor/ /rails/vendor/
COPY scripts/install_unix_odbc_package.sh /scripts/

# Make sure the script is executable and run it
RUN chmod +x /scripts/install_unix_odbc_package.sh && \
    /scripts/install_unix_odbc_package.sh

# Copy the vendor directory and libiODBC installation script
COPY vendor/ /rails/vendor/
COPY scripts/install_lib_iodbc_package.sh /scripts/

# Make sure the script is executable and run it
RUN chmod +x /scripts/install_lib_iodbc_package.sh && \
    /scripts/install_lib_iodbc_package.sh

# Install application gems
COPY Gemfile Gemfile.lock ./
RUN bundle install && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git && \
    bundle exec bootsnap precompile --gemfile

# Copy application code
COPY . .

# Precompile bootsnap code for faster boot times
RUN bundle exec bootsnap precompile app/ lib/

# Final stage for app image
FROM base

# Install packages needed for deployment
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y curl libvips postgresql-client && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Copy built artifacts: gems, application
COPY --from=build /usr/local/bundle /usr/local/bundle
COPY --from=build /rails /rails

# Create the required directories and Run and own only the runtime files as a non-root user for security
RUN useradd rails --create-home --shell /bin/bash && \
    mkdir -p /rails/db /rails/log /rails/storage /rails/tmp && \
    chown -R rails:rails /rails/db /rails/log /rails/storage /rails/tmp

USER rails:rails

# Entrypoint prepares the database.
ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# Start the server by default, this can be overwritten at runtime
EXPOSE 3000
CMD ["./bin/rails", "server", "-b", "0.0.0.0"]
