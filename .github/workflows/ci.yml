name: Rails CI and ECR Push

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 253707965345.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: control-plane
  IMAGE_TAG: latest

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: control_plane_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      DB_HOST: localhost
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.2.0

    - name: Bundle Install
      run: bundle install

    - name: Database Setup
      run: bundle exec rake db:create db:schema:load --trace

    - name: Run Tests
      run: bundle exec rspec

    - name: Install cc-test-reporter
      run: |
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        chmod +x ./cc-test-reporter

    - name: Upload Coverage to Code Climate
      run: |
        ./cc-test-reporter before-build
        ./cc-test-reporter after-build --exit-code $?

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      run: echo $(aws ecr get-login-password --region ${{ env.AWS_REGION }}) | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

    - name: Build and Push Docker image
      run: |
        docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

